---
import { ContentBlock } from '@components/elements';
import Layout from '../../../layouts/Layout.astro';
import { getStaticPathsFromData } from 'src/utilities/api/helpers/getStaticPathsFromData';
import { getDataPageCV, type PageCVProps } from 'src/utilities/api/pageCV';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { formatMonthYearDate } from 'src/utilities/date';
import { getLocaleFromURL } from 'src/utilities/locale';
import { Job } from '@components/molecules';

export async function getStaticPaths() {
	const data = await getDataPageCV();
	const staticPaths = getStaticPathsFromData({ data, fragment: 'cv' });

	return staticPaths;
}

interface Props {
	pageData: PageCVProps;
}

const { pageData } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);

console.log('pageData', pageData.experience);
---

<Layout
	metaData={pageData.metaData}
	type={pageData.type}
	alternativeTranslations={pageData.alternativeTranslations}
>
	<div itemscope itemtype="http://schema.org/Person">
		<h1>{pageData.title}</h1>

		<span itemprop="jobTitle">Front-end UI developer</span>
		<h2>Personal details</h2>
		<dl>
			<dt>Name</dt>
			<dd>
				<span itemprop="givenName">Bram</span>
				<span itemprop="familyName">Smulders</span>
			</dd>
			<dt>Date of birth</dt>
			<dd itemprop="birthDate">12/01/1986</dd>
			<dt>Location</dt>
			<dd itemprop="homeLocation">
				Tilburg, <span itemprop="nationality">Netherlands</span>
			</dd>
		</dl>

		<ul id="links">
			<li>
				<a itemprop="url" rel="me" href="https://github.com/bramsmulders">
					github
				</a>
			</li>
			<li>
				<a
					itemprop="url"
					rel="me"
					href="https://www.linkedin.com/in/iambramsmulders/"
				>
					linkedin
				</a>
			</li>
		</ul>

		{
			pageData.experience ? (
				<section id={stringToSlug(pageData.experience.title)}>
					<h2>{pageData.experience.title}</h2>
					<ul>
						{pageData.experience.items.map((experience) => (
							<li>
								<Job
									title={experience.title}
									company={experience.company}
									content={experience.content}
									dateStart={experience.dateStart}
									dateEnd={experience.dateEnd}
								/>
							</li>
						))}
					</ul>
				</section>
			) : null
		}
	</div>

	{
		pageData.education?.items?.length ? (
			<section id={stringToSlug(pageData.education.title || 'education')}>
				{pageData.education?.title ? <h2>{pageData.education.title}</h2> : null}
				<ul>
					{pageData.education.items.map((education) => (
						<li>
							<h3>{education.title}</h3>
							<p>{education.institution}</p>
							{education?.content ? (
								<ContentBlock value={education.content} />
							) : null}
						</li>
					))}
				</ul>
			</section>
		) : null
	}
</Layout>
