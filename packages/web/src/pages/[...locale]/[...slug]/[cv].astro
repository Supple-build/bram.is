---
import { ContentBlock } from '@components/elements';
import Layout from '../../../layouts/Layout.astro';
import { getStaticPathsFromData } from 'src/utilities/api/helpers/getStaticPathsFromData';
import { getDataPageCV, type PageCVProps } from 'src/utilities/api/pageCV';
import { stringToSlug } from 'src/utilities/stringToSlug';
import { formatLongDate } from 'src/utilities/date';
import { getLocaleFromURL } from 'src/utilities/locale';
import { Job } from '@components/molecules';
import { useSettings } from 'src/utilities/api/queries';
import { Hero } from '@components/organisms/Hero';
import { LayerSidebar } from '@components/molecules/Layer';
import { Heading } from '@components/elements/Heading';

export async function getStaticPaths() {
	const data = await getDataPageCV();
	const staticPaths = getStaticPathsFromData({ data, fragment: 'cv' });

	return staticPaths;
}

interface Props {
	pageData: PageCVProps;
	avg?: boolean;
}

const { pageData, avg } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const settings = await useSettings({ locale });

const now = new Date();
---

<Layout
	metaData={{
		...pageData.metaData,
		title: `CV-Bram_Smulders-${now.getFullYear()}-${now.getMonth() + 1}-${locale.id}${avg ? '-avg' : ''}`,
	}}
	skipMetaTitleSuffix
	type={pageData.type}
	alternativeTranslations={pageData.alternativeTranslations}
>
	<div
		class={`u-print-full${avg ? ' is-avg' : ''}`}
		itemscope
		itemtype="http://schema.org/Person"
	>
		<Hero
			chapeau={settings.labels.salutation}
			title={`${settings.labels.iAm} ${settings.personal.givenName} ${settings.personal.familyName}.`}
			image={!avg
				? {
						src: '/images/avatar/lon-eye.webp',
						alt: 'Bram Smulders in the London Eye',
					}
				: undefined}
		>
			<p slot="payoff">
				{
					!avg
						? settings.labels.a.charAt(0).toUpperCase() +
							settings.labels.a.slice(1)
						: ''
				}
				<span class="u-color-brand-primary" itemprop="jobTitle"
					>{settings.personal.jobTitle}</span
				>
				{
					!avg ? (
						<>
							{settings.labels.from}
							<span class="u-color-brand-primary">
								{settings.personal.country}
							</span>
							.
						</>
					) : null
				}
			</p>
			<ContentBlock value={pageData.intro} />
		</Hero>
		<LayerSidebar class="u-print__section">
			{
				pageData.experience ? (
					<div class="o-flow" id={stringToSlug(pageData.experience.title)}>
						<Heading level={2} styledAs={4} variant="emphasised">
							{pageData.experience.title}
						</Heading>
						<ul class="o-flow" role="list">
							{pageData.experience.items.map((experience, index) => (
								<li>
									<Job
										title={experience.title}
										company={experience.company}
										content={index <= 2 ? experience.content : undefined}
										dateStart={experience.dateStart}
										dateEnd={experience.dateEnd}
										employmentType={experience.employmentType}
									/>
								</li>
							))}
						</ul>
					</div>
				) : null
			}
			<div slot="aside" class="o-flow">
				<Heading level={2} styledAs={4} variant="emphasised">
					{pageData.skills.title}
				</Heading>
				<div>
					<div class="c-prose c-prose--emphasise | o-flow">
						<ContentBlock value={pageData.skills.content} />
					</div>
				</div>

				{
					!avg ? (
						<>
							<Heading level={2} styledAs={4} variant="emphasised">
								{pageData.personal.title}
							</Heading>
							<dl class="c-definitions">
								<dt>{settings.labels.name}</dt>
								<dd>
									<span itemprop="givenName">
										{settings.personal.givenName}
									</span>
									<span itemprop="familyName">
										{settings.personal.familyName}
									</span>
								</dd>
								<dt>{settings.labels.dateOfBirth}</dt>
								<dd itemprop="birthDate">
									{formatLongDate(
										new Date(settings.personal.birthDate),
										locale.locale,
									)}
								</dd>
								<dt>{settings.labels.email}</dt>
								<dd>{settings.personal.email}</dd>
								<dt>{settings.labels.phone}</dt>
								<dd>{settings.personal.phone}</dd>
								<dt>{settings.labels.location}</dt>
								<dd itemprop="homeLocation">
									{settings.personal.city},{' '}
									<span itemprop="nationality">
										{settings.personal.country}
									</span>
								</dd>
							</dl>
						</>
					) : null
				}
			</div>
		</LayerSidebar>

		<!-- <LayerSidebar reversed>
			{
				pageData.education?.items?.length ? (
					<section id={stringToSlug(pageData.education.title || 'education')}>
						{pageData.education?.title ? (
							<Heading level={2} styledAs={4}>
								{pageData.education.title}
							</Heading>
						) : null}
						<ul>
							{pageData.education.items.map((education) => (
								<li>
									<Heading level={3} styledAs={5}>
										{education.title}
									</Heading>
									<p>{education.institution}</p>
									{education?.content ? (
										<ContentBlock value={education.content} />
									) : null}
								</li>
							))}
						</ul>
					</section>
				) : null
			}
		</LayerSidebar> -->
	</div>
</Layout>

<style lang="scss">
	.c-definitions {
		// display: grid;
		// grid-template-columns: 1fr 1fr;
		dt {
			text-transform: capitalize;
			font-weight: bold;
		}
		dd {
			margin-inline-start: 0;
		}

		dd + dt {
			margin-block-start: var(--s-space-micro);
		}
	}

	.c-prose {
	}

	.c-prose--emphasise {
		:global(em) {
			// color: var(--s-color-brand-primary);
			font-weight: 600;
			font-style: normal;
		}
	}
</style>
