---
import { ContentBlock } from '@components/elements';
import Layout from '../../../layouts/Layout.astro';
import { getStaticPathsFromData } from 'src/utilities/api/helpers/getStaticPathsFromData';
import { getDataPageCV, type PageCVProps } from 'src/utilities/api/pageCV';
import { stringToSlug } from 'src/utilities/stringToSlug';
import {
	formatDate,
	formatLongDate,
	formatMonthYearDate,
} from 'src/utilities/date';
import { getLocaleFromURL } from 'src/utilities/locale';
import { Job } from '@components/molecules';
import { useSettings } from 'src/utilities/api/queries';
import { Hero } from '@components/organisms/Hero';
import { LayerSidebar } from '@components/molecules/Layer';
import { Heading } from '@components/elements/Heading';

export async function getStaticPaths() {
	const data = await getDataPageCV();
	const staticPaths = getStaticPathsFromData({ data, fragment: 'cv' });

	return staticPaths;
}

interface Props {
	pageData: PageCVProps;
}

const { pageData } = Astro.props;
const locale = getLocaleFromURL(Astro.url.pathname);
const settings = await useSettings({ locale });

console.log('pageData', pageData.experience);
const now = new Date();
---

<Layout
	metaData={{
		...pageData.metaData,
		title: `CV-Bram_Smulders-${now.getFullYear()}-${now.getMonth() + 1}`,
	}}
	skipMetaTitleSuffix
	type={pageData.type}
	alternativeTranslations={pageData.alternativeTranslations}
>
	<div class="u-print-full" itemscope itemtype="http://schema.org/Person">
		<Hero />
		<LayerSidebar class="u-print__section">
			{
				pageData.experience ? (
					<div class="o-flow" id={stringToSlug(pageData.experience.title)}>
						<Heading level={2} styledAs={4} variant="emphasised">
							{pageData.experience.title}
						</Heading>
						<ul class="o-flow" role="list">
							{pageData.experience.items.map((experience) => (
								<li>
									<Job
										title={experience.title}
										company={experience.company}
										content={experience.content}
										dateStart={experience.dateStart}
										dateEnd={experience.dateEnd}
									/>
								</li>
							))}
						</ul>
					</div>
				) : null
			}
			<div slot="aside" class="o-flow">
				<Heading level={2} styledAs={4} variant="emphasised">Skills</Heading>
				<div>
					<p>I hold myself to high standards in:</p>
					<ul>
						<li>Creating accessible websites/apps</li>
						<li>Semantic HTML</li>
						<li>
							Modern, lightweight, and scalable CSS (incl. Sass or Tailwind
							CSS).
						</li>
						<li>JavaScript (incl. Astro, React & Svelte).</li>
						<li>Accessible code</li>
						<li>Responsive design</li>
						<li>Build tools like Vite, Gulp & NPM.</li>
						<li>Test suites like Vitest, Jest, BrowserStack & Cypress.</li>
						<li>
							Styleguide Driven Development (using tools like Storybook, Astro
							Starlight & Pattern Lab)
						</li>
						<li>Progressive Web Apps</li>
						<li>Build tools like Vite, Webpack & NPM scripts</li>
						<li>
							Agile methodologies like Scrum & Kanban and their tools like Jira
							or Trello
						</li>
						<li>git, style- and JavaScript linters and other tools.</li>
					</ul>
				</div>

				<Heading level={2} styledAs={4} variant="emphasised"
					>Personal details</Heading
				>
				<dl class="c-definitions">
					<dt>{settings.labels.name}</dt>
					<dd>
						<span itemprop="givenName">{settings.personal.givenName}</span>
						<span itemprop="familyName">{settings.personal.familyName}</span>
					</dd>
					<dt>{settings.labels.dateOfBirth}</dt>
					<dd itemprop="birthDate">
						{
							formatLongDate(
								new Date(settings.personal.birthDate),
								locale.locale,
							)
						}
					</dd>
					<dt>E-mail</dt>
					<dd>hello@supple.build</dd>
					<dt>phone</dt>
					<dd>+31642250861</dd>
					<dt>{settings.labels.location}</dt>
					<dd itemprop="homeLocation">
						{settings.personal.city}, <span itemprop="nationality"
							>{settings.personal.country}</span
						>
					</dd>
					<!-- <dt>Jobtitle</dt>
					<dd itemprop="jobTitle">{settings.personal.jobTitle}</dd> -->
				</dl>
			</div>
		</LayerSidebar>

		<!-- <LayerSidebar reversed>
			{
				pageData.education?.items?.length ? (
					<section id={stringToSlug(pageData.education.title || 'education')}>
						{pageData.education?.title ? (
							<Heading level={2} styledAs={4}>
								{pageData.education.title}
							</Heading>
						) : null}
						<ul>
							{pageData.education.items.map((education) => (
								<li>
									<Heading level={3} styledAs={5}>
										{education.title}
									</Heading>
									<p>{education.institution}</p>
									{education?.content ? (
										<ContentBlock value={education.content} />
									) : null}
								</li>
							))}
						</ul>
					</section>
				) : null
			}
		</LayerSidebar> -->
	</div>
</Layout>

<style lang="scss">
	.c-definitions {
		// display: grid;
		// grid-template-columns: 1fr 1fr;
		dt {
			text-transform: capitalize;
			font-weight: bold;
		}
		dd {
			margin-inline-start: 0;
		}

		dd + dt {
			margin-block-start: var(--s-space-micro);
		}
	}
</style>
